/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * FilterListDialog.java
 *
 * Created on 4-Feb-2012, 6:35:17 PM
 */
package ca.ubc.magic.profiler.partitioning.view.filter;

import ca.ubc.magic.profiler.dist.model.HostModel;
import ca.ubc.magic.profiler.dist.model.ModuleModel;
import ca.ubc.magic.profiler.dist.transform.IFilter;
import java.util.Map;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author nima
 */
public class FilterListDialog extends javax.swing.JDialog implements FilterUpdateListener {

    private Map<String, IFilter> mFilterMap;
    private ModuleModel mModuleModel;
    private HostModel mHostModel;
    
    /** Creates new form FilterListDialog */
    public FilterListDialog(java.awt.Frame parent, boolean modal,
            Map<String, IFilter> filterMap, final ModuleModel moduleModel, final HostModel hostModel) {
        super(parent, modal);        
        initComponents();
        mModuleModel = moduleModel;
        mHostModel = hostModel;
        mFilterMap = filterMap;
        showFilters();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        filterLabel = new javax.swing.JLabel();
        separator = new javax.swing.JSeparator();
        filterScrollPanel = new javax.swing.JScrollPane();
        filterTable = new javax.swing.JTable();
        okButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setName("Form"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(ca.ubc.magic.profiler.simulator.view.DistSimulatorApp.class).getContext().getResourceMap(FilterListDialog.class);
        filterLabel.setFont(resourceMap.getFont("filterLabel.font")); // NOI18N
        filterLabel.setText(resourceMap.getString("filterLabel.text")); // NOI18N
        filterLabel.setName("filterLabel"); // NOI18N

        separator.setName("separator"); // NOI18N

        filterScrollPanel.setName("filterScrollPanel"); // NOI18N

        filterTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Filter Name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        filterTable.setName("filterTable"); // NOI18N
        filterTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                filterTableMouseClicked(evt);
            }
        });
        filterScrollPanel.setViewportView(filterTable);
        filterTable.getColumnModel().getColumn(0).setResizable(false);
        filterTable.getColumnModel().getColumn(0).setPreferredWidth(5);
        filterTable.getColumnModel().getColumn(0).setHeaderValue(resourceMap.getString("filterTable.columnModel.title0")); // NOI18N
        filterTable.getColumnModel().getColumn(1).setHeaderValue(resourceMap.getString("filterTable.columnModel.title1")); // NOI18N

        okButton.setText(resourceMap.getString("okButton.text")); // NOI18N
        okButton.setName("okButton"); // NOI18N
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(filterLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 195, Short.MAX_VALUE)
                .addComponent(okButton, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addComponent(separator, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
            .addComponent(filterScrollPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(filterLabel)
                    .addComponent(okButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(separator, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(filterScrollPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 402, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void filterTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_filterTableMouseClicked
        int row = filterTable.getSelectedRow();
        String filterName = (String) ((DefaultTableModel)
                        filterTable.getModel()).getValueAt(row, 1);
        IFilter f = mFilterMap.get(filterName);
        mFilterDialog = new FilterContentDialog(
                (java.awt.Frame) this.getOwner(), Boolean.FALSE, filterName, f.getFilterAsString());
        ((FilterContentDialog) mFilterDialog).addFilterUpdateListener(this);
        mFilterDialog.setLocationRelativeTo(this);
        mFilterDialog.setVisible(Boolean.TRUE);
    }//GEN-LAST:event_filterTableMouseClicked

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        this.setVisible(Boolean.FALSE);
    }//GEN-LAST:event_okButtonActionPerformed
    
    private void showFilters(){
        int id = 1;
        for (String str : mFilterMap.keySet()){
             ((DefaultTableModel)filterTable.getModel()).addRow(
                     new Object[]{id, str});
             id++;
        }
    }
    
    public void updateFilter(String filterName, String filterString) {
        IFilter filter = mFilterMap.get(filterName);
        filter.setStringToFilter(mModuleModel, mHostModel, filterString);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel filterLabel;
    private javax.swing.JScrollPane filterScrollPanel;
    private javax.swing.JTable filterTable;
    private javax.swing.JButton okButton;
    private javax.swing.JSeparator separator;
    // End of variables declaration//GEN-END:variables

   private javax.swing.JDialog mFilterDialog;
}
